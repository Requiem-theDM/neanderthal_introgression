library(cowplot)
# Functions for Plotting Equations on GGplot
lm_eqn <- function(df, x_col, y_col) {
m <- lm(as.formula(paste(y_col, "~", x_col)), data = df)
a <- format(coef(m)[1], digits = 4)
b <- format(coef(m)[2], digits = 4)
r2 <- format(summary(m)$r.squared, digits = 4)
eq <- paste0("italic(y) == ", a, " + ", b, " * italic(x) * ",
"~~ italic(r)^2 ~ '=' ~ ", r2)
as.character(as.expression(eq))
}
# Add Nice Titles to Graphs
draw_label_theme <- function(label, theme = NULL, element = "text", ...) {
if (is.null(theme)) {
theme <- ggplot2::theme_get()
}
if (!element %in% names(theme)) {
stop("Element must be a valid ggplot theme element name")
}
elements <- ggplot2::calc_element(element, theme)
cowplot::draw_label(label,
fontfamily = elements$family,
fontface = elements$face,
colour = elements$color,
size = elements$size,
...
)
}
# Import Data
cavity_area <- read.csv("~/OneDrive - Johns Hopkins/GAG Strucutre/RemodelingSim/AllCavities.txt",colClasses = c("numeric","numeric","numeric","numeric","character","character","character","numeric"))
d25n_cavity_area <- read.csv("~/OneDrive - Johns Hopkins/GAG Strucutre/RemodelingSim/Re_ Experimental Cavity Area/d25n_scaled_detail.txt",colClasses = c("character","numeric","numeric","numeric","numeric","numeric","numeric"))
hGag_cavity_area <- read.csv("~/OneDrive - Johns Hopkins/GAG Strucutre/RemodelingSim/Re_ Experimental Cavity Area/hGag_scaled_detail.txt",colClasses = c("character","numeric","numeric","numeric","numeric","numeric","numeric"))
# Remove 562kBT Hexamers, as they consist of multiple islands that don't closely model actual hexamer assembly
cavity_area <- filter(cavity_area,HexamerStrength != 562)
# Convert Binding Rate and Hexamer Strength to Factors for visualization purposes
cavity_area <- cavity_area %>% mutate_at(vars(BindingRate),funs(factor(., levels=unique(.))))
cavity_area <- cavity_area %>% mutate_at(vars(HexamerStrength),funs(factor(., levels=unique(.))))
# Filter by Hexamer Strength, Binding Rate, Trace ID, and Timepoint, then removes the open border of the sphere
cavity_area <- cavity_area %>% group_by(HexamerStrength,BindingRate,TraceID,Timepoint) %>% filter(CavityAreaHexamers != max(CavityAreaHexamers))
# Remove the open border for experimental datasets
d25n_cavity_area <- d25n_cavity_area %>% group_by(VLPNumber) %>% filter(HexamerCavityArea != max(HexamerCavityArea))
hGag_cavity_area <- hGag_cavity_area %>% group_by(VLPNumber) %>% filter(HexamerCavityArea != max(HexamerCavityArea))
# Combine Experimental Datasets into a Single Data Frame and Restructure to Merge with Simulation Data
d25n_cavity_area <- d25n_cavity_area %>% mutate(Condition = "d25n")
hGag_cavity_area <- hGag_cavity_area %>% mutate(Condition = "hGag")
experimental_cavity_area <- bind_rows(d25n_cavity_area,hGag_cavity_area)
experimental_cavity_area <- rename(experimental_cavity_area,c(SurfaceAreaCADomain = 'SurfaceArea', Coverage = 'PercentCoverage', CavityAreaAngstroms = 'CavityArea', CavityAreaHexamers = 'HexamerCavityArea'))
experimental_cavity_area <- experimental_cavity_area %>% select(-c(Hexamers,CavityPerimeter))
experimental_cavity_area <- experimental_cavity_area %>% relocate(VLPumber,.after = Condition)
# Filter for cavities with an area that is at least equal to the area of half of a hexamer, as the experimental data only has sufficient resolution to view hexamers with 3 or more subunits.
cavity_area <- cavity_area %>% filter(CavityAreaHexamers >= 0.50)
experimental_cavity_area <- experimental_cavity_area %>% filter(CavityAreaHexamers >= 0.50)
#Bin data by Timepoints
finalTimes <- cavity_area %>% group_by(HexamerStrength,BindingRate,TraceID) %>% summarize(maxTimepoint = max(Timepoint))
timepointed_cavities <- cavity_area %>% left_join(y=finalTimes, by=c("HexamerStrength","BindingRate","TraceID"))
timepointed_cavities <- timepointed_cavities %>% rowwise() %>% mutate(TimepointBins = cut(Timepoint,breaks=c(0,0.1*maxTimepoint,0.2*maxTimepoint,0.3*maxTimepoint,0.4*maxTimepoint,0.5*maxTimepoint,0.6*maxTimepoint,0.7*maxTimepoint,0.8*maxTimepoint,0.9*maxTimepoint,maxTimepoint),labels=c('First Tenth','Second Tenth','Third Tenth','Fourth Tenth', 'Fifth Tenth', 'Sixth Tenth', 'Seventh Tenth', 'Eighth Tenth', 'Ninth Tenth', 'Tenth Tenth')))
# Relabel Facets
relabeled_cavities <- timepointed_cavities
levels(relabeled_cavities$HexamerStrength) <- c('-11.62kBT','-7.62kBT','-9.62kBT')
levels(relabeled_cavities$BindingRate) <- c('0.015/uMS','0.15/uMS','1.5/uMS')
#Relabel Experimental Facets
relabeled_experimental_cavity_area <- experimental_cavity_area
relabeled_experimental_cavity_area$Condition <- relabeled_experimental_cavity_area$Condition %>% factor(levels = c('d25n','hGag'),labels=c('Packaging Viral RNA','Packaging Cellular RNA'))
# Visualize Cavities
LimitedCavityBox <- ggplot() +
geom_boxplot(relabeled_cavities %>% filter(HexamerStrength == '-7.62kBT'),mapping = aes(x=CavityAreaHexamers,y=BindingRate),
position="identity",width=1/length(unique(relabeled_cavities$BindingRate))) +
theme_base(base_size = 15) +
labs(title="Simulated Data",
x="Area of Cavity (In Hexamer Areas)",
y="Binding Rate") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
theme(plot.title = element_text(hjust = 0.5)) +
xlim(0,100) +
coord_flip()+
scale_color_colorblind()
LimitedCavityBox
SimulatedCavityBox <- ggplot() +
geom_boxplot(relabeled_cavities,mapping = aes(x=CavityAreaHexamers,y=BindingRate),
position="identity",width=0.75) +
facet_grid(.~factor(HexamerStrength,levels=c('-7.62kBT','-9.62kBT','-11.62kBT'))) +
theme_base(base_size = 15) +
labs(title="Simulated Data",
x="Area of Cavity (In Hexamer Areas)",
y="Binding Rate") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
theme(plot.title = element_text(hjust = 0.5)) +
xlim(0,100) +
coord_flip()+
scale_color_colorblind()
SimulatedCavityBox
ExperimentalCavityBox <- ggplot() +
geom_boxplot(relabeled_experimental_cavity_area,mapping = aes(x=CavityAreaHexamers,y=0),
position="identity",width=1/length(unique(relabeled_cavities$BindingRate))) +
ylim(-1,1) +
facet_grid(.~factor(Condition,levels=c('Packaging Viral RNA','Packaging Cellular RNA'),labels = c('Packaging\nViral RNA','Packaging\nCellular RNA'))) +
theme_base(base_size = 15) +
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank()) +
labs(title="Experimental Data",
x="Area of Cavity (In Hexamer Areas)") +
theme(plot.title = element_text(hjust = 0.5)) +
xlim(0,100) +
coord_flip()+
scale_color_colorblind()
ExperimentalCavityBox
title_gg <- ggdraw() +
draw_label_theme("Gag Lattice Cavity Areas",theme = theme_base(),element = "plot.title",x = 0.5, hjust = 0.5, vjust = 1) +
theme(plot.background = element_rect(fill="#FFFFFF", color = NA))
combinedCavityBox <- cowplot::plot_grid(SimulatedCavityBox,ExperimentalCavityBox,align="h")
combinedCavityBox
labeledCavityBox <- cowplot::plot_grid(title_gg,combinedCavityBox,ncol=1,rel_heights=c(0.15,1))
labeledCavityBox
combinedCavityBox
SimulatedCavityBox <- ggplot() +
geom_boxplot(relabeled_cavities,mapping = aes(x=CavityAreaHexamers,y=BindingRate),
position="identity",width=0.75) +
facet_grid(.~factor(HexamerStrength,levels=c('-7.62kBT','-9.62kBT','-11.62kBT'))) +
theme_base(base_size = 15) +
labs(title="Simulated Data",
x="Area of Cavity (In Hexamer Areas)",
y="Binding Rate") +
scale_y_discrete(limits=rev)
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
theme(plot.title = element_text(hjust = 0.5)) +
xlim(0,100) +
coord_flip()+
scale_color_colorblind()
SimulatedCavityBox
SimulatedCavityBox <- ggplot() +
geom_boxplot(relabeled_cavities,mapping = aes(x=CavityAreaHexamers,y=BindingRate),
position="identity",width=0.75) +
facet_grid(.~factor(HexamerStrength,levels=c('-7.62kBT','-9.62kBT','-11.62kBT'))) +
theme_base(base_size = 15) +
labs(title="Simulated Data",
x="Area of Cavity (In Hexamer Areas)",
y="Binding Rate") +
scale_y_discrete(limits=rev) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
theme(plot.title = element_text(hjust = 0.5)) +
xlim(0,100) +
coord_flip()+
scale_color_colorblind()
SimulatedCavityBox
# Visualize Cavities
LimitedCavityBox <- ggplot() +
geom_boxplot(relabeled_cavities %>% filter(HexamerStrength == '-7.62kBT'),mapping = aes(x=CavityAreaHexamers,y=BindingRate),
position="identity",width=1/length(unique(relabeled_cavities$BindingRate))) +
theme_base(base_size = 15) +
labs(title="Simulated Data",
x="Area of Cavity (In Hexamer Areas)",
y="Binding Rate") +
scale_y_discrete(limits=rev) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
theme(plot.title = element_text(hjust = 0.5)) +
xlim(0,100) +
coord_flip()+
scale_color_colorblind()
LimitedCavityBox
ExperimentalCavityBox <- ggplot() +
geom_boxplot(relabeled_experimental_cavity_area,mapping = aes(x=CavityAreaHexamers,y=0),
position="identity",width=1/length(unique(relabeled_cavities$BindingRate))) +
ylim(-1,1) +
facet_grid(.~factor(Condition,levels=c('Packaging Viral RNA','Packaging Cellular RNA'),labels = c('Packaging\nViral RNA','Packaging\nCellular RNA'))) +
theme_base(base_size = 15) +
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank()) +
labs(title="Experimental Data",
x="Area of Cavity (In Hexamer Areas)") +
scale_y_discrete(limits=rev) +
theme(plot.title = element_text(hjust = 0.5)) +
xlim(0,100) +
coord_flip()+
scale_color_colorblind()
ExperimentalCavityBox
ExperimentalCavityBox <- ggplot() +
geom_boxplot(relabeled_experimental_cavity_area,mapping = aes(x=CavityAreaHexamers,y=0),
position="identity",width=1/length(unique(relabeled_cavities$BindingRate))) +
ylim(-1,1) +
facet_grid(.~factor(Condition,levels=c('Packaging Viral RNA','Packaging Cellular RNA'),labels = c('Packaging\nViral RNA','Packaging\nCellular RNA'))) +
theme_base(base_size = 15) +
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank()) +
labs(title="Experimental Data",
x="Area of Cavity (In Hexamer Areas)") +
scale_y_continuous(limits=rev) +
theme(plot.title = element_text(hjust = 0.5)) +
xlim(0,100) +
coord_flip()+
scale_color_colorblind()
ExperimentalCavityBox
ExperimentalCavityBox <- ggplot() +
geom_boxplot(relabeled_experimental_cavity_area,mapping = aes(x=CavityAreaHexamers,y=0),
position="identity",width=1/length(unique(relabeled_cavities$BindingRate))) +
ylim(-1,1) +
facet_grid(.~factor(Condition,levels=c('Packaging Viral RNA','Packaging Cellular RNA'),labels = c('Packaging\nViral RNA','Packaging\nCellular RNA'))) +
theme_base(base_size = 15) +
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank()) +
labs(title="Experimental Data",
x="Area of Cavity (In Hexamer Areas)") +
theme(plot.title = element_text(hjust = 0.5)) +
xlim(0,100) +
coord_flip()+
scale_color_colorblind()
ExperimentalCavityBox
ExperimentalCavityBox <- ggplot() +
geom_boxplot(relabeled_experimental_cavity_area,mapping = aes(x=CavityAreaHexamers,y=0),
position="identity",width=1/length(unique(relabeled_cavities$BindingRate))) +
ylim(-1,1) +
facet_grid(.~factor(Condition,levels=c('Packaging Cellular RNA','Packaging Viral RNA'),labels = c('Packaging\nViral RNA','Packaging\nCellular RNA'))) +
theme_base(base_size = 15) +
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank()) +
labs(title="Experimental Data",
x="Area of Cavity (In Hexamer Areas)") +
theme(plot.title = element_text(hjust = 0.5)) +
xlim(0,100) +
coord_flip()+
scale_color_colorblind()
ExperimentalCavityBox
title_gg <- ggdraw() +
draw_label_theme("Gag Lattice Cavity Areas",theme = theme_base(),element = "plot.title",x = 0.5, hjust = 0.5, vjust = 1) +
theme(plot.background = element_rect(fill="#FFFFFF", color = NA))
combinedCavityBox <- cowplot::plot_grid(SimulatedCavityBox,ExperimentalCavityBox,align="h")
combinedCavityBox
combinedCavityBox
labeledCavityBox <- cowplot::plot_grid(title_gg,combinedCavityBox,ncol=1,rel_heights=c(0.15,1))
labeledCavityBox
combinedCavityBox
ggsave("~/OneDrive - Johns Hopkins/GAG Strucutre/RemodelingSim/Experimental_and_Simulated_Gag_Lattice_Cavities.png",combinedCavityBox)
# Load required libraries
library(tidyverse)
# Load the TSV file
setwd("~/qb24_project/data/data_clean/Alignments/")
file_path <- "2024-10-30 12:27:25.625848_alignment_0.0_all_either.tsv"
df <- read_tsv(file_path)
# Define derived allele frequency bins
bins <- seq(0, 1, by = 0.05)  # Create bins from 0 to 1 with a width of 0.05
labels <- paste0(head(bins, -1), "-", tail(bins, -1))  # Generate labels for the bins
# Filter data for introgressions unique to denisovans (DMATCH = "match" & NMATCH != "match"), introgressions unique to neanderthals (NMATCH = "match" & DMATCH != "match"), and introgressions from both (DMATCH = "match" and NMATCH = "match")
denisovans = df %>% mutate_if(DMATCH == "match" & NMATCH != "match",Category = "Denisovans") %>%
mutate(DAF_bin = cut(variantPIP, breaks = bins, labels = labels, include.lowest = TRUE))
# Filter data for introgressions unique to denisovans (DMATCH = "match" & NMATCH != "match"), introgressions unique to neanderthals (NMATCH = "match" & DMATCH != "match"), and introgressions from both (DMATCH = "match" and NMATCH = "match")
denisovans = df %>% mutate_at(DMATCH == "match" & NMATCH != "match",Category = "Denisovans") %>%
mutate(DAF_bin = cut(variantPIP, breaks = bins, labels = labels, include.lowest = TRUE))
# Filter data for introgressions unique to denisovans (DMATCH = "match" & NMATCH != "match"), introgressions unique to neanderthals (NMATCH = "match" & DMATCH != "match"), and introgressions from both (DMATCH = "match" and NMATCH = "match")
denisovans = df %>% mutate_at(DMATCH) %>%
mutate(DAF_bin = cut(variantPIP, breaks = bins, labels = labels, include.lowest = TRUE))
# Filter data for introgressions unique to denisovans (DMATCH = "match" & NMATCH != "match"), introgressions unique to neanderthals (NMATCH = "match" & DMATCH != "match"), and introgressions from both (DMATCH = "match" and NMATCH = "match")
denisovans = df %>% mutate_at(DMATCH == "match" & NMATCH != "match",Category = "Neanderthals")
# Filter data for introgressions unique to denisovans (DMATCH = "match" & NMATCH != "match"), introgressions unique to neanderthals (NMATCH = "match" & DMATCH != "match"), and introgressions from both (DMATCH = "match" and NMATCH = "match")
denisovans = df %>% mutate(if(DMATCH == "match" & NMATCH != "match",Category = "Neanderthals")) mutate_at(DMATCH == "match" & NMATCH != "match",Category = "Neanderthals")
# Filter data for introgressions unique to denisovans (DMATCH = "match" & NMATCH != "match"), introgressions unique to neanderthals (NMATCH = "match" & DMATCH != "match"), and introgressions from both (DMATCH = "match" and NMATCH = "match")
denisovans = df %>% mutate(if(DMATCH == "match" & NMATCH != "match",Category = "Neanderthals"))
# Filter data for introgressions unique to denisovans (DMATCH = "match" & NMATCH != "match"), introgressions unique to neanderthals (NMATCH = "match" & DMATCH != "match"), and introgressions from both (DMATCH = "match" and NMATCH = "match")
denisovans = df %>% mutate(if(DMATCH == "match" & NMATCH != "match"),Category = "Neanderthals")
# Filter data for introgressions unique to denisovans (DMATCH = "match" & NMATCH != "match"), introgressions unique to neanderthals (NMATCH = "match" & DMATCH != "match"), and introgressions from both (DMATCH = "match" and NMATCH = "match")
df$Category = df %>% ifelse(NMATCH != "match" and DMATCH == "match",Denisovan,Other)
# Filter data for introgressions unique to denisovans (DMATCH = "match" & NMATCH != "match"), introgressions unique to neanderthals (NMATCH = "match" & DMATCH != "match"), and introgressions from both (DMATCH = "match" and NMATCH = "match")
df$Category = df %>% ifelse(NMATCH != "match" and DMATCH == "match",Denisovan,Other)
# Filter data for introgressions unique to denisovans (DMATCH = "match" & NMATCH != "match"), introgressions unique to neanderthals (NMATCH = "match" & DMATCH != "match"), and introgressions from both (DMATCH = "match" and NMATCH = "match")
df$Category = ifelse(df$NMATCH != "match" and df$DMATCH == "match",Denisovan,Other)
# Filter data for introgressions unique to denisovans (DMATCH = "match" & NMATCH != "match"), introgressions unique to neanderthals (NMATCH = "match" & DMATCH != "match"), and introgressions from both (DMATCH = "match" and NMATCH = "match")
df$Category = ifelse(df$NMATCH != "match" & df$DMATCH == "match",Denisovan,Other)
# Filter data for introgressions unique to denisovans (DMATCH = "match" & NMATCH != "match"), introgressions unique to neanderthals (NMATCH = "match" & DMATCH != "match"), and introgressions from both (DMATCH = "match" and NMATCH = "match")
df$Category = ifelse(df$NMATCH != "match" & df$DMATCH == "match","Denisovan","Other")
View(df)
# Filter data for introgressions unique to denisovans (DMATCH = "match" & NMATCH != "match"), introgressions unique to neanderthals (NMATCH = "match" & DMATCH != "match"), and introgressions from both (DMATCH = "match" and NMATCH = "match")
df$Category = ifelse(df$NMATCH != "match" & df$DMATCH == "match","Denisovan","Other") %>% ifelse(df$Category == "Other" & NMATCH == "match" & DMATCH != "match","Neanderthal","Other")
# Filter data for introgressions unique to denisovans (DMATCH = "match" & NMATCH != "match"), introgressions unique to neanderthals (NMATCH = "match" & DMATCH != "match"), and introgressions from both (DMATCH = "match" and NMATCH = "match")
df$Category = ifelse(df$NMATCH != "match" & df$DMATCH == "match","Denisovan","Other") %>% ifelse(df$Category == "Other" & df$NMATCH == "match" & df$DMATCH != "match","Neanderthal","Other")
# Filter data for introgressions unique to denisovans (DMATCH = "match" & NMATCH != "match"), introgressions unique to neanderthals (NMATCH = "match" & DMATCH != "match"), and introgressions from both (DMATCH = "match" and NMATCH = "match")
df$Category = ifelse(df$NMATCH != "match" & df$DMATCH == "match","Denisovan","Other") %>% ifelse(df$Category == "Other" & df$NMATCH == "match" & df$DMATCH != "match","Neanderthal")
# Filter data for introgressions unique to denisovans (DMATCH = "match" & NMATCH != "match"), introgressions unique to neanderthals (NMATCH = "match" & DMATCH != "match"), and introgressions from both (DMATCH = "match" and NMATCH = "match")
df$Category = ifelse(df$NMATCH != "match" & df$DMATCH == "match","Denisovan") %>% ifelse(df$Category == "Other" & df$NMATCH == "match" & df$DMATCH != "match","Neanderthal")
# Filter data for introgressions unique to denisovans (DMATCH = "match" & NMATCH != "match"), introgressions unique to neanderthals (NMATCH = "match" & DMATCH != "match"), and introgressions from both (DMATCH = "match" and NMATCH = "match")
df$Category = ifelse(df$NMATCH != "match" & df$DMATCH == "match","Denisovan","Other") %>% ifelse(df$Category == "Other" & df$NMATCH == "match" & df$DMATCH != "match","Neanderthal","Other")
# Filter data for introgressions unique to denisovans (DMATCH = "match" & NMATCH != "match"), introgressions unique to neanderthals (NMATCH = "match" & DMATCH != "match"), and introgressions from both (DMATCH = "match" and NMATCH = "match")
df$Category = ifelse(df$NMATCH != "match" & df$DMATCH == "match","Denisovan","Other")
df$Category = ifelse(df$Category == "Other" & df$NMATCH == "match" & df$DMATCH != "match","Neanderthal","Other")
# Load the TSV file
setwd("~/qb24_project/data/data_clean/Alignments/")
file_path <- "2024-10-30 12:27:25.625848_alignment_0.0_all_either.tsv"
df <- read_tsv(file_path)
# Define derived allele frequency bins
bins <- seq(0, 1, by = 0.05)  # Create bins from 0 to 1 with a width of 0.05
labels <- paste0(head(bins, -1), "-", tail(bins, -1))  # Generate labels for the bins
# Filter data for introgressions unique to denisovans (DMATCH = "match" & NMATCH != "match"), introgressions unique to neanderthals (NMATCH = "match" & DMATCH != "match"), and introgressions from both (DMATCH = "match" and NMATCH = "match")
df
# Define derived allele frequency bins
bins <- seq(0, 1, by = 0.05)  # Create bins from 0 to 1 with a width of 0.05
labels <- paste0(head(bins, -1), "-", tail(bins, -1))  # Generate labels for the bins
# Filter data for introgressions unique to denisovans (DMATCH = "match" & NMATCH != "match"), introgressions unique to neanderthals (NMATCH = "match" & DMATCH != "match"), and introgressions from both (DMATCH = "match" and NMATCH = "match")
denisovans = df %>% filter(NMATCH != "match" & DMATCH == "match") %>%
mutate(DAF_bin = cut(variantPIP, breaks = bins, labels = labels, include.lowest = TRUE)) %>% mutate(Category = "Denisovans")
neanderthals = df %>% filter(NMATCH == "match" & DMATCH != "match") %>%
mutate(DAF_bin = cut(variantPIP, breaks = bins, labels = labels, include.lowest = TRUE)) %>% mutate(Category = "Neanderthals")
both = df %>% filter(NMATCH == "match" & DMATCH == "match") %>%
mutate(DAF_bin = cut(variantPIP, breaks = bins, labels = labels, include.lowest = TRUE)) %>% mutate(Category = "Both")
combined_df = bind_rows(denisovans,neanderthals,both)
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count", position = "identity", alpha = 0.75) +
facet_grid(POPGROUP,Category)
scale_y_continuous(trans = "log10") +
scale_fill_colorblind() +
labs(x = "Derived Allele Frequency", y = "Log10(Number of SNPs)",
title = "Stacked Bar Graph of Derived Allele Frequency vs. Number of SNPs",
fill = "SNP Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load required libraries
library(tidyverse)
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count", position = "identity", alpha = 0.75) +
facet_grid(POPGROUP,Category)
View(df)
View(combined_df)
combined_df = bind_rows(denisovans,neanderthals,both)=
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count", position = "identity", alpha = 0.75) +
facet_grid(POPGROUP,Category)
combined_df = bind_rows(denisovans,neanderthals,both)=
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count", position = "identity") +
facet_grid(POPGROUP,Category)
combined_df = bind_rows(denisovans,neanderthals,both)=
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count", position = "identity", alpha = 0.75) +
scale_y_continuous(trans = "log10") +
scale_fill_colorblind() +
labs(x = "Derived Allele Frequency", y = "Log10(Number of SNPs)",
title = "Stacked Bar Graph of Derived Allele Frequency vs. Number of SNPs",
fill = "SNP Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
combined_df = bind_rows(denisovans,neanderthals,both)=
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count", position = "identity", alpha = 0.75) +
scale_y_continuous(trans = "log10") +
scale_fill_colorblind() +
labs(x = "Derived Allele Frequency", y = "Log10(Number of SNPs)",
title = "Stacked Bar Graph of Derived Allele Frequency vs. Number of SNPs",
fill = "SNP Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
combined_df = bind_rows(denisovans,neanderthals,both)=
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count") +
scale_y_continuous(trans = "log10") +
scale_fill_colorblind() +
labs(x = "Derived Allele Frequency", y = "Log10(Number of SNPs)",
title = "Stacked Bar Graph of Derived Allele Frequency vs. Number of SNPs",
fill = "SNP Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
combined_df = bind_rows(denisovans,neanderthals,both)=
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count") +
labs(x = "Derived Allele Frequency", y = "Log10(Number of SNPs)",
title = "Stacked Bar Graph of Derived Allele Frequency vs. Number of SNPs",
fill = "SNP Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
combined_df = bind_rows(denisovans,neanderthals,both)=
# Create the stacked bar plot
ggplot(combined_df) +
geom_histogram(aes(x=DAF_bin),stat = "count") +
labs(x = "Derived Allele Frequency", y = "Log10(Number of SNPs)",
title = "Stacked Bar Graph of Derived Allele Frequency vs. Number of SNPs",
fill = "SNP Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
combined_df = bind_rows(denisovans,neanderthals,both)=
# Create the stacked bar plot
ggplot(combined_df) +
geom_histogram(aes(x=DAF_bin),stat = "count")
combined_df = bind_rows(denisovans,neanderthals,both)=
# Create the stacked bar plot
ggplot(combined_df) +
geom_bar(aes(x=DAF_bin),stat = "count")
# Load required libraries
library(tidyverse)
# Load the TSV file
setwd("~/qb24_project/data/data_clean/Alignments/")
file_path <- "2024-10-30 12:27:25.625848_alignment_0.0_all_either.tsv"
df <- read_tsv(file_path)
# Define derived allele frequency bins
bins <- seq(0, 1, by = 0.05)  # Create bins from 0 to 1 with a width of 0.05
labels <- paste0(head(bins, -1), "-", tail(bins, -1))  # Generate labels for the bins
# Filter data for introgressions unique to denisovans (DMATCH = "match" & NMATCH != "match"), introgressions unique to neanderthals (NMATCH = "match" & DMATCH != "match"), and introgressions from both (DMATCH = "match" and NMATCH = "match")
denisovans = df %>% filter(NMATCH != "match" & DMATCH == "match") %>%
mutate(DAF_bin = cut(variantPIP, breaks = bins, labels = labels, include.lowest = TRUE)) %>% mutate(Category = "Denisovans")
neanderthals = df %>% filter(NMATCH == "match" & DMATCH != "match") %>%
mutate(DAF_bin = cut(variantPIP, breaks = bins, labels = labels, include.lowest = TRUE)) %>% mutate(Category = "Neanderthals")
both = df %>% filter(NMATCH == "match" & DMATCH == "match") %>%
mutate(DAF_bin = cut(variantPIP, breaks = bins, labels = labels, include.lowest = TRUE)) %>% mutate(Category = "Both")
combined_df = bind_rows(denisovans,neanderthals,both)=
# Create the stacked bar plot
ggplot(combined_df) +
geom_histogram(aes(x=DAF_bin),stat = "count")
combined_df = bind_rows(denisovans,neanderthals,both)=
# Create the stacked bar plot
ggplot(combined_df) +
geom_histogram(aes(x=DAF_bin),stat = "count")
combined_df = bind_rows(denisovans,neanderthals,both)
# Create the stacked bar plot
ggplot(combined_df) +
geom_histogram(aes(x=DAF_bin),stat = "count")
combined_df = bind_rows(denisovans,neanderthals,both)
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count") +
scale_y_continuous(trans = "log10") +
labs(x = "Derived Allele Frequency", y = "Log10(Number of SNPs)",
title = "Stacked Bar Graph of Derived Allele Frequency vs. Number of SNPs",
fill = "SNP Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count") +
scale_y_continuous(trans = "log10") +
facet_grid(POPGROUP,Category)
labs(x = "Derived Allele Frequency", y = "Log10(Number of SNPs)",
title = "Stacked Bar Graph of Derived Allele Frequency vs. Number of SNPs",
fill = "SNP Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count") +
scale_y_continuous(trans = "log10") +
facet_grid(!,Category)
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count") +
scale_y_continuous(trans = "log10") +
facet_grid(~,Category)
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count") +
scale_y_continuous(trans = "log10") +
facet_grid(~,Category)
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count") +
facet_grid(~,Category)
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count") +
facet_grid(~,Category) +
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count") +
facet_grid(~Category) +
labs(x = "Derived Allele Frequency", y = "Log10(Number of SNPs)",
title = "Stacked Bar Graph of Derived Allele Frequency vs. Number of SNPs",
fill = "SNP Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count") +
facet_grid(POPGROUP~Category) +
labs(x = "Derived Allele Frequency", y = "Log10(Number of SNPs)",
title = "Stacked Bar Graph of Derived Allele Frequency vs. Number of SNPs",
fill = "SNP Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count") +
facet_grid(~Category) +
labs(x = "Derived Allele Frequency", y = "Log10(Number of SNPs)",
title = "Stacked Bar Graph of Derived Allele Frequency vs. Number of SNPs",
fill = "SNP Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count") +
facet_grid(~Category) +
scale_y_continuous(log10())
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count") +
facet_grid(~Category) +
scale_y_continuous(trans='log10')
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count") +
facet_grid(~Category) +
scale_y_continuous(trans='log10') +
labs(x = "Derived Allele Frequency", y = "Log10(Number of SNPs)",
title = "Stacked Bar Graph of Derived Allele Frequency vs. Number of SNPs",
fill = "SNP Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the stacked bar plot
ggplot(combined_df, aes(x = DAF_bin)) +
geom_histogram(stat = "count") +
facet_grid(~Category) +
scale_y_continuous(trans='log10') +
labs(x = "Derived Allele Frequency", y = "Log10(Number of SNPs)",
title = "Derived Allele Frequency vs. Number of SNPs",
fill = "SNP Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
